// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stock;

#nullable disable

namespace Stock.DataAccessLayer.Migrations
{
    [DbContext(typeof(StocktakingJkContextModelSnapshot))]
    partial class StocktakingJkContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stock.Models.Acquisition", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_product");

                    b.Property<int?>("IdSupplier")
                        .HasColumnType("int")
                        .HasColumnName("ID_supplier");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSupplier");

                    b.ToTable("Acquisition", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCategory");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Stock.Models.ExistenceByRegion", b =>
                {
                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("ID_product");

                    b.Property<int?>("IdRegion")
                        .HasColumnType("int")
                        .HasColumnName("ID_region");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdRegion");

                    b.ToTable("ExistenceByRegion", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Movement", b =>
                {
                    b.Property<int>("IdMotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_motion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMotion"));

                    b.Property<DateTime?>("DateAndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_and_Time");

                    b.Property<int?>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("ID_product");

                    b.Property<string>("TypeMotion")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("char(15)")
                        .HasColumnName("type_motion")
                        .IsFixedLength();

                    b.HasKey("IdMotion");

                    b.HasIndex("IdProduct");

                    b.ToTable("Movement", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<int?>("AmountProduct")
                        .HasColumnType("int")
                        .HasColumnName("Amount_Product");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("ID_category");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Region", b =>
                {
                    b.Property<int>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_region");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegion"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(130)
                        .IsUnicode(false)
                        .HasColumnType("varchar(130)");

                    b.HasKey("IdRegion");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Supplier", b =>
                {
                    b.Property<int>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_supplier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSupplier"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Contact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("Stock.Models.Acquisition", b =>
                {
                    b.HasOne("Stock.Models.Product", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_Acquisition_Product");

                    b.HasOne("Stock.Models.Supplier", "IdSupplierNavigation")
                        .WithMany()
                        .HasForeignKey("IdSupplier")
                        .HasConstraintName("FK_Acquisition_Supplier");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSupplierNavigation");
                });

            modelBuilder.Entity("Stock.Models.ExistenceByRegion", b =>
                {
                    b.HasOne("Stock.Models.Product", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_ExistenceByRegion_Product");

                    b.HasOne("Stock.Models.Region", "IdRegionNavigation")
                        .WithMany()
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("FK_ExistenceByRegion_Region");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdRegionNavigation");
                });

            modelBuilder.Entity("Stock.Models.Movement", b =>
                {
                    b.HasOne("Stock.Models.Product", "IdProductNavigation")
                        .WithMany("Movements")
                        .HasForeignKey("IdProduct")
                        .HasConstraintName("FK_Movement_Product");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Stock.Models.Product", b =>
                {
                    b.HasOne("Stock.Models.Category", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("Stock.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Stock.Models.Product", b =>
                {
                    b.Navigation("Movements");
                });
#pragma warning restore 612, 618
        }
    }
}
